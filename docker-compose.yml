services:
  # Service de la base de données PostgreSQL pour SonarQube
  db_postgresql:
    image: postgres:latest
    container_name: sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - monitoring
    restart: always
    ports:
      - "5432:5432"

  # Service SonarQube avec PostgreSQL comme base de données
  sonarqube:
    image: sonarqube:lts
    container_name: sonarqube
    environment:
      - sonar.jdbc.url=jdbc:postgresql://sonarqube-db:5432/sonar
      - sonar.jdbc.username=sonar
      - sonar.jdbc.password=sonar
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-extensions:/opt/sonarqube/extensions
      - sonarqube-logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    networks:
      - monitoring
    restart: always
    depends_on:
      - db_postgresql

  # Autres services de ton application (backend, frontend, etc.)
  db_mysql:
    image: mysql:8.0
    container_name: myproject-db-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: admin
      MYSQL_PASSWORD: adminpassword
    volumes:
      - db-mysql-data:/var/lib/mysql
    networks:
      - backend
    restart: always
    ports:
      - "3306:3306"

  backend:
    build:
      context: ./backend
    environment:
      - NODE_ENV
      - DATABASE_URL=mysql://admin:adminpassword@db_mysql:3306/mydatabase
      - JWT_SECRET=mysecretkey
    ports:
      - "4000:4000"
    networks:
      - backend
    depends_on:
      - db_mysql
    restart: always

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    networks:
      - frontend
    depends_on:
      - backend
    restart: always

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: always

  grafana:
    image: grafana/grafana-oss:10.2.2
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - monitoring
    restart: always

  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    networks:
      - monitoring
    restart: always

  traefik:
    image: traefik:v2.5
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - proxy
    restart: always

networks:
  frontend:
  backend:
  monitoring:
    driver: bridge
  proxy:

volumes:
  db-mysql-data:
  postgres-data:  # Volume pour persister les données de PostgreSQL
  grafana-data:
  sonarqube-data:
  sonarqube-extensions:
  sonarqube-logs:
